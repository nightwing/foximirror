<?xml version="1.0"?>

<bindings id="debugBindings"
   xmlns="http://www.mozilla.org/xbl"
   xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
   xmlns:xbl="http://www.mozilla.org/xbl"
   xmlns:html="http://www.w3.org/1999/xhtml">

  <binding id="parseerror">
    <content hidevscroll="true" hidehscroll="true">
      <children/>
      <hbox style="font-weight:normal;font-size:15px">
		  <xul:button label="edit" edit='true'/>
		  <xul:shadiaglue/>
      </hbox>
    </content>
	<implementation>
      <constructor>        
      </constructor>
      <field name="_lastSelectedRow">
        -1
      </field>
    </implementation>
    <handlers>
      <handler event="click" button="0" clickcount="1">
      <![CDATA[
		if (event.originalTarget.hasAttribute("edit")){
			var match = this.textContent.match(/Line number (\d+),/i)
			var lineNumber = match&&parseInt(match[1]);
			window.openDialog("chrome://global/content/viewSource.xul", "_blank", "all,dialog=no", document.location, null, null, lineNumber, null);
		}
      ]]>
      </handler> 
	 <handler event="click" button="2" clickcount="1">
      <![CDATA[		
      ]]>
      </handler> 
    </handlers>
  </binding>



<binding id="shadiaGlue">
    <content>
		<xul:arrowscrollbox aID='actionbar'/>	
		<xul:menulist  type='menu' class='plain' sizetopopup='false' align='center' id='more'>
			<xul:menupopup aID='actionpopup' onpopupshowing='_popupshown(this)'/>	
		</xul:menulist>
    </content>
	
	<resources>
		<stylesheet src="debug.css"/>
    </resources>
	
	<implementation>
	<method name="_popupshown">
		<body><![CDATA[
			this.actions.noCache(this)
		]]></body>
	</method>
		<constructor><![CDATA[{
  //**********************************************************
 //* actions
//****/
Components.utils.import("resource://gre/modules/Services.jsm", window);
function flushCache(){Services.obs.notifyObservers(null, "startupcache-invalidate", null);}
this.actions={//external
	 log:function(){toOpenWindowByType("global:console", "chrome://global/content/console.xul")}
	,reload:function(){flushCache();document.location=document.location}
	,reopen:function(){
		flushCache();
		Services.ww.openWindow(null, window.location.href, "_blank", 
			"chrome,extrachrome,resizable,modal=no," + /*"centerscreen"+*/'top=' + (screenY +10)+ ',left=' + (screenX+10),
			null).focus();		
		return;
	}
	,jsMirror:function()	{$shadia.openJSMirrorFor(window)}
	,inspector:function()   {toOpenWindowByType('shadia:inspector', "chrome://shadia/content/domMirror/domMirror.xul")}
	,chromeMirror:function(){toOpenWindowByType('shadia:chromeMirror', "chrome://shadia/content/chromeMirror/chromeMirror.xul")}
	,cssMirror:function()   {toOpenWindowByType('shadia:cssMirror', "chrome://shadia/content/cssMirror/cssMirror.xul")}
	,xulMirror:function()   {toOpenWindowByType('shadia:xulMirror', "chrome://shadia/content/xulMirror/xulMirror.xul")}
	,prefMirror:function()  {toOpenWindowByType('shadia:prefMirror', "chrome://shadia/content/prefMirror/prefMirror.xul")}
	,idleMirror:function()  {toOpenWindowByType('shadia:idleMirror', "chrome://shadia/content/idleMirror/idleMirror.xul")}
	,magnifier:function()   {$shadia.getLocalFile('chrome://shadia/content/magnifier.ahk').launch()}
	,restartApp:function()  {
		flushCache();
		if(typeof Application=='object') Application.restart()
		else
		var appStartup = Ci.nsIAppStartup;
		Cc['@mozilla.org/toolkit/app-startup;1'].getService(appStartup).quit(appStartup.eRestart|appStartup.eAttemptQuit);	
	}
	,reloadChrome:function()  {Services.chromeReg.reloadChrome()}
	,refreshSkins:function()  {Services.chromeReg.refreshSkins()}
	,revealCurDoc:function()  {$shadia.getLocalFile(location.href).reveal()}

	,noCache: function(item){
		var p = devPrefState()
		if (!item) {
			p = !p
			$shadia.setPref("nglayout.debug.disable_xul_cache",    p, 'bool')
			$shadia.setPref("nglayout.debug.disable_xul_fastload", p, 'bool')
		} else
			item = document.getAnonymousElementByAttribute(item, "aID", "noCache");
		
		if (item) {
			item.setAttribute("checked", p);
			flushCache();
		}
	}
}
var activeactions=this.hasAttribute('buttons')?this.getAttribute('buttons').split(/ *, */):['reload','reopen','log','jsMirror']
var actionNames={
	 restartApp:'restart firefox'
	,reopen:'open new:)'
}
var shortNames={
	 reopen:':)'
}
var actionsColors = {restartApp:'red',reloadChrome:'orange',reload:'orange',magnifier:'blue'}    
function toOpenWindowByType(inType, uri, features) {
    var windowManager = Cc['@mozilla.org/appshell/window-mediator;1'].getService(Ci.nsIWindowMediator);
    var topWindow = windowManager.getMostRecentWindow(inType);
	if(topWindow&&(topWindow!=window)){
        topWindow.focus();
    }else if(features){
        window.open(uri, "_blank", features);
    }else{
        window.open(uri, "_blank", "modal=no,chrome,extrachrome,menubar,resizable=yes,scrollbars,status,toolbar");
    }
}
this.devPrefState = function devPrefState(){
	return $shadia.getPref("nglayout.debug.disable_xul_cache",    'bool')
		&& $shadia.getPref("nglayout.debug.disable_xul_fastload", 'bool')
}

var actionbar=this.actionbar,actionpopup=this.actionpopup
for(var i in actions){
	if(i == 'noCache') {
		var newEl=document.createElement('menuseparator')
		actionpopup.appendChild(newEl)
		var newEl=document.createElement('checkbox')
		newEl.setAttribute('aID',i);
		newEl.setAttribute('label', i);	
		actionpopup.appendChild(newEl)
		continue
	}
	var newEl=document.createElement('menuitem')
	newEl.setAttribute('aID',i);
	newEl.setAttribute('label', actionNames[i]||i);	
	if(i in actionsColors)
		newEl.style.color = actionsColors[i];
	actionpopup.appendChild(newEl)
	

	if(activeactions.indexOf(i)>-1){
		//newEl.style.color='graytext'
		newEl.style.color='green'
		var newEl=document.createElement('toolbarbutton')
		newEl.setAttribute('aID',i);
		newEl.setAttribute('label', shortNames[i]||actionNames[i]||i);
		actionbar.appendChild(newEl)
	}
}




//inject shadia
Components.utils.import('resource://shadia/main.js')
if(!window.shadia)
	Services.scriptloader.loadSubScript('chrome://shadia/content/shadia.js', window);

}]]></constructor>
		
<field name="actionbar">
	document.getAnonymousElementByAttribute(this, "aID", "actionbar");
</field>
<field name="actionpopup">
	document.getAnonymousElementByAttribute(this, "aID", "actionpopup");
</field>
    
    </implementation>
	<handlers>
		<handler event="command">
			actions[event.originalTarget.getAttribute('aID')]()
		</handler>
	</handlers>
</binding>


<binding id="tooltip" extends="chrome://global/content/bindings/popup.xml#popup-base">
    <content>
      <children>
        <xul:box flex="1"/>
      </children>
    </content>
  </binding>


</bindings>
